/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "swe_keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>


#define DEFAULT     0
#define SYMBOLS_SWE 1
#define FUNC        2
#define NUMBER      3
#define SETTINGS    4

/ {
    behaviors {

	del_gui: mod_tap_del_gui {
		compatible = "zmk,behavior-hold-tap";
		label = "MT_DEL_GUI";
		#binding-cells = <2>;
		flavor = "tap-preferred";
		tapping-term-ms = <200>;   // hold time for LGUI
		quick-tap-ms = <175>;      // time window for auto-repeat
		bindings = <&kp LGUI>, <&kp DELETE>;
	};

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

	leader_alt: leader_alt {
		compatible = "zmk,behavior-hold-tap";
		label = "LT_LEADER_ALT";
		#binding-cells = <2>;
		flavor = "tap-preferred";
		tapping-term-ms = <200>;
		quick-tap-ms = <150>;
		bindings = <&kp>, <&kp>;
	};	


	leader: leader {
		compatible = "zmk,behavior-leader-key";
		#binding-cells = <0>;

		/* Window management */
		kill_win  { sequence = <Q>;        bindings = <&kp LS(LG(Q))>; };

		send_ws1  { sequence = <S A>;     bindings = <&kp LS(LG(N1))>; };
		send_ws2  { sequence = <S S>;     bindings = <&kp LS(LG(N2))>; };
		send_ws3  { sequence = <S D>;     bindings = <&kp LS(LG(N3))>; };
		send_ws4  { sequence = <S F>;     bindings = <&kp LS(LG(N4))>; };
		send_ws5  { sequence = <S G>;     bindings = <&kp LS(LG(N5))>; };
		/* Workspaces 1–5 (focus) */
		ws1       { sequence = <W A>;       bindings = <&kp LG(N1)>; };
		ws2       { sequence = <W S>;       bindings = <&kp LG(N2)>; };
		ws3       { sequence = <W D>;       bindings = <&kp LG(N3)>; };
		ws4       { sequence = <W F>;       bindings = <&kp LG(N4)>; };
		ws5       { sequence = <W G>;       bindings = <&kp LG(N5)>; };

		/* TOGGLE  */
		toggle_fs { sequence = <T F>;        bindings = <&kp LG(F)>; };
		toggle_float { sequence = <T L>;     bindings = <&kp LS(LG(SPACE))>; };
		toggle_split { sequence = <T S P>;     bindings = <&kp LG(E)>; };
		toggle_split_v { sequence = <T V>;     bindings = <&kp LG(V)>; };
		toggle_split_h { sequence = <T H>;     bindings = <&kp LG(B)>; };
		/* Layout modes */
		tabbed    { sequence = <T T>;      bindings = <&kp LG(W)>; };
		stacked   { sequence = <T S T>;      bindings = <&kp LG(S)>; };

		/* Move focus */
		focus_h   { sequence = <H>;        bindings = <&kp LG(H)>; };
		focus_j   { sequence = <J>;        bindings = <&kp LG(J)>; };
		focus_k   { sequence = <K>;        bindings = <&kp LG(K)>; };
		focus_l   { sequence = <L>;        bindings = <&kp LG(L)>; };

		/* OPEN */
		new_win   { sequence = <O T>;        bindings = <&kp LG(RETURN)>; };

		/* Move window */
		move_h    { sequence = <M H>; bindings = <&kp LS(LG(H))>; };
		move_j    { sequence = <M J>; bindings = <&kp LS(LG(J))>; };
		move_k    { sequence = <M K>; bindings = <&kp LS(LG(K))>; };
		move_l    { sequence = <M L>; bindings = <&kp LS(LG(L))>; };


		/* Scratchpad & launcher */
		launcher  { sequence = <D>;        bindings = <&kp LG(D)>; };

		/* System / media */
		//reload    { sequence = <R>;        bindings = <&kp LS(LG(C))>; };
		lock      { sequence = <Z L>;      bindings = <&kp LC(LG(L))>; };
		quit_sway { sequence = <Z Q>;        bindings = <&kp LS(LG(E))>; };
	};
    };

    cond_layers {
        compatible = "zmk,conditional-layers";

        // Define SETTINGS layer as tri-state

        func_tristate {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    /*           40 Keys
╭─────────────────╮ ╭─────────────────╮
│    0  1  2  3  4│ │ 5  6  7  8  9   │
│10 11 12 13 14 15│ │16 17 18 19 20 21│
│22 23 24 25 26 27│ │28 29 30 31 32 33│
╰────────╮34 35 36│ │37 38 39╭────────╯
         ╰────────╯ ╰────────╯       */

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp TAB>;
        };


        combo_lgui {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp LGUI>;
        };

        escape2 {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <50>;
        };

        tab_right {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
            timeout-ms = <10>;
        };

    };

    macros {
        alt_f1_1: alt_f1_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F1) &kp LA(NUMBER_1)>;
	    label = "ALT_F1_1";
	};
	sway_ws_next: sway_ws_next {
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings = <&kp LS(LG(N))>;
		label = "SWAY_WS_NEXT";
	};

	sway_ws_prev: sway_ws_prev {
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings = <&kp LS(LG(P))>;
		label = "SWAY_WS_PREV";
	};

	sway_ws_back: sway_ws_back {
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings = <&kp LS(LG(B))>;
		label = "SWAY_WS_BACK";
	};
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q  &kp W  &kp E                &kp R  &kp T	         	&kp Y       &kp U  &kp I                         &kp O    &kp P
&kp LCTRL   &kp A  &kp S  &kp D                &kp F  &kp G         		&kp H       &kp J  &kp K                         &kp L    &kp SEMI  &kp RET
&kp LSHIFT  &kp Z  &kp X  &kp C                &kp V  &kp B         		&kp N       &kp M  &kp COMMA                     &kp DOT  &kp FSLH  &kp RSHIFT
                          &lt_spc 2 BACKSPACE  &mo 3  &leader_alt LEFT_ALT &leader	 &lt_spc 5 DELETE  &mo 1  &kp SPACE
            >;
        };

        symbols {
            bindings = <
              &kp EXCLAMATION       &kp AT_SIGN      &kp HASH              &kp DOLLAR             &kp PERCENT  			&kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp GRAVE     &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE    			&kp UNDERSCORE  &kp PLUS       &kp MINUS     &kp EQUAL         &kp DOUBLE_QUOTES  &kp SQT
&kp CAPSLOCK  &kp BACKSLASH  	    &kp TILDE        &sway_ws_back	&sway_ws_prev	&sway_ws_next			&none           &none          &none         &none             &none              &none
                                             &none                 &none                          &to 4        	  &trans          &trans         &none
            >;
        };


	func_layer {
            bindings = <
       &none      &kp LS(LG(S))  &none          &kp LC(INSERT)     &kp LS(INSERT)     &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END         &none
&to 0  &alt_f1_1  &kp LS(LC(C))  &kp LS(LC(R))  &kp RIGHT_SHIFT    &kp RIGHT_CONTROL  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT       &mmv MOVE_UP    &mkp LCLK
&to 2  &none      &none          &kp K_MUTE     &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp C_PREV      &kp C_PP        &kp C_NEXT    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT
                                 &none          &trans             &trans             &trans          &trans          &none
            >;
        };


        number_layer {
            bindings = <
       &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &none
&none  &kp F11       &kp F12       &none         &none         &none         &none         &none         &kp COMMA     &kp PERIOD    &kp SLASH     &none
                                   &none         &trans        &trans        &trans        &none         &none
            >;
        };

        settings_layer {
            bindings = <
       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &ext_power EP_ON  &ext_power EP_OFF  &none  &none  &none
&none  &bt BT_CLR    &none         &none         &none         &none         &none             &none              &none  &none  &none  &to 0
&none  &out OUT_BLE  &out OUT_USB  &none         &none         &bootloader   &bootloader       &none              &none  &none  &none  &to DEFAULT
                                   &none         &trans        &trans        &trans            &trans             &none
            >;
        };

        shortcuts {
            bindings = <
       &kp LS(LG(Q)) &kp LS(LG(E))  &kp LS(LG(W)) &kp LS(LG(S)) &kp LS(LG(SPACE))		&none  &none  &none  &none  &none
&kp LG(F) &kp LG(N1) &kp LG(N2)  &kp LG(N3) &kp LG(N4) &kp LG(N5)			        &kp LG(H) &kp LG(J)  &kp LG(K) &kp LG(L) &none &kp LG(RET)
&kp LS(LG(X)) &none  &kp LS(LG(D)) &sway_ws_back	&sway_ws_prev	&sway_ws_next  		&kp LS(LG(H)) &kp LS(LG(J))  &kp LS(LG(K)) &kp LS(LG(L)) &none &none
                     					&none  &none	&none			&none  &none  &none  
            >;
        };
    };
};
